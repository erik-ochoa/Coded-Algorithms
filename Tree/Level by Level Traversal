import java.util.*;

/* Class to represent Tree node */
class Node {
	int data;
	Node left, right;

	public Node(int item) {
		data = item;
		left = null;
		right = null;
	}
}

/* Class to print Level Order Traversal */
class BinaryTree {

	Node root;

	// This could have been done with a while looop inside the levelOrder function
	public void helper(Queue<Node> que, ArrayList<Integer> res) {
	    Node curr = que.poll();
	    
	    if (curr != null) {
	        res.add(curr.data);
	        que.add(curr.left);
	        que.add(curr.right);
	        
	        helper(que, res);
	    }
	}
	
	// Setting things up
	public ArrayList<Integer> levelOrder(Node root) {
        Queue<Node> que = new LinkedList();
        ArrayList<Integer> res = new ArrayList();
        if (root != null) {
            que.add(root);
            helper(que, res);
        }
        
        return res;
	}

    /* creating a binary tree and entering 
		the nodes */
	public static void main(String args[]) {
		BinaryTree tree_level = new BinaryTree();
		tree_level.root = new Node(1);
		tree_level.root.left = new Node(2);
		tree_level.root.right = new Node(3);
		tree_level.root.left.left = new Node(4);
		tree_level.root.left.right = new Node(5);

		System.out.println("Level order traversal of binary tree is - ");
		ArrayList<Integer> result = tree_level.levelOrder(tree_level.root);
		System.out.println(result);
	}
}
