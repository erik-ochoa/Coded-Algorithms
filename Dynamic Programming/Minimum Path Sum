class Solution {
    public int minPathSum(int[][] grid) {
        int totalCost = 0;
        
        if (grid.length > 0) {
            int[][] cost = new int[grid.length][grid[0].length];
            
            // creating the cost matrix
            for (int row = 0; row < grid.length; row++) {
                for (int col = 0; col < grid[row].length; col++) {
                    int top = -1;
                    int left = -1;
                    
                    if (row > 0) {
                        top = cost[row-1][col];
                    }
                    if (col > 0) {
                        left = cost[row][col-1];
                    }
                    
                    if (top == -1 && left == -1) {
                        cost[row][col] = grid[row][col];
                    } else if (top == -1) {
                        cost[row][col] = grid[row][col] + left;
                    } else if (left == -1) {
                        cost[row][col] = grid[row][col] + top;
                    } else {
                        int min = top < left ? top : left;
                        cost[row][col] = grid[row][col] + min;
                    }
                }
            }
            
            // finding the min path going grom bottom-right to top-left
            int row = grid.length - 1;
            int col = grid[0].length - 1;
            while (row >= 0 && col >= 0) {
                totalCost += grid[row][col];

                int top = -1;
                int left = -1;

                if (row > 0) {
                    top = cost[row-1][col];
                }
                if (col > 0) {
                    left = cost[row][col-1];
                }

                if (top == -1 && left == -1) {
                    break;
                } else if (top == -1) {
                    col--;
                } else if (left == -1) {
                    row--;
                } else {
                    if (top < left) {
                        row--;
                    } else {
                        col--;
                    }
                }
            }
        }
        
        return totalCost;
    }
}
