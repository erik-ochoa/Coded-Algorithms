class Solution {
    public String convert(String s, int numRows) {
        if (numRows == 1) {
            return s;
        }
        
        int columnsLen = (s.length()/(numRows + numRows - 2) + 1) * (1 + numRows - 2);
        char[][] storage = new char[numRows][columnsLen];
        int col = 0;
        int row = 0;
        int idx = 0;
        
        while (idx < s.length()) {
            
            // going down
            while (idx < s.length() && row < numRows) {
                storage[row][col] = s.charAt(idx);
                row++;
                idx++;
            }
            row = row - 2;
            col++;

            // going diagonally
            while (idx < s.length() && row > 0) {
                storage[row][col] = s.charAt(idx);
                row--;
                col++;
                idx++;
            }
        }
        
        // constructing the result
        StringBuilder res = new StringBuilder();
        for (int i = 0; i < numRows; i++) {
            for (int j = 0; j < columnsLen; j++) {
                char curr = storage[i][j];
                if (curr != 0) {
                    res.append(curr);
                }
            }
        }
        
        return res.toString();
    }
}
